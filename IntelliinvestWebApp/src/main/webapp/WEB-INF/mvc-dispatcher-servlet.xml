<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- <beans:bean annotation-driven /> -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<beans:bean id="exporter"
		class="org.springframework.jmx.export.MBeanExporter">
		<beans:property name="assembler" ref="assembler" />
		<beans:property name="namingStrategy" ref="namingStrategy" />
		<beans:property name="autodetect" value="true" />
	</beans:bean>

	<beans:bean id="jmxAttributeSource"
		class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource" />

	<!-- will create management interface using annotation metadata -->
	<beans:bean id="assembler"
		class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
		<beans:property name="attributeSource" ref="jmxAttributeSource" />
	</beans:bean>

	<!-- will pick up the ObjectName from the annotation -->
	<beans:bean id="namingStrategy"
		class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
		<beans:property name="attributeSource" ref="jmxAttributeSource" />
	</beans:bean>

	<beans:bean id="applicationProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="ignoreUnresolvablePlaceholders"
			value="false" />
		<beans:property name="order" value="1" />
		<beans:property name="locations">
			<beans:list>
				<beans:value>classpath:intelliinvest.properties</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Seeds -->
	<beans:bean id="mongoSeedlID" class="com.mongodb.ServerAddress">
		<beans:constructor-arg type="java.lang.String"
			name="host" value="${db.host}" />
		<beans:constructor-arg type="int" name="port"
			value="${db.port}" />
	</beans:bean>

	<!-- Credentials -->
	<beans:bean id="mongoCredentialID" class="com.mongodb.MongoCredential">
		<beans:constructor-arg name="mechanism"
			value="#{T(com.mongodb.AuthenticationMechanism).SCRAM_SHA_1}" />
		<beans:constructor-arg type="java.lang.String"
			name="userName" value="${db.username}" />
		<beans:constructor-arg type="java.lang.String"
			name="source" value="${db.database}" />
		<beans:constructor-arg type="char[]" name="password"
			value="${db.password}" />
	</beans:bean>

	<!-- MongoClient -->
	<beans:bean id="mongoClientID" class="com.mongodb.MongoClient">
		<beans:constructor-arg ref="mongoSeedlID" />
		<beans:constructor-arg ref="mongoCredentialID" />
	</beans:bean>

	<!-- MongoDbFactory -->
	<beans:bean id="mongoDbFactory"
		class="org.springframework.data.mongodb.core.SimpleMongoDbFactory">
		<beans:constructor-arg ref="mongoClientID" />
		<beans:constructor-arg name="databaseName"
			value="${db.database}" />
	</beans:bean>

	<!-- by default look for a Mongo object named 'mongo' - default name used 
		for the converter is 'mappingConverter' -->
	<mongo:mapping-converter id="mappingConverter"
		base-package="com.intelliinvest.data.convertor">
		<mongo:custom-converters>
			<mongo:converter>
				<beans:bean
					class="com.intelliinvest.util.MongoDBConverters.DateFromLocalDate" />
			</mongo:converter>
			<mongo:converter>
				<beans:bean
					class="com.intelliinvest.util.MongoDBConverters.LocalDateFromDate" />
			</mongo:converter>
			<mongo:converter>
				<beans:bean
					class="com.intelliinvest.util.MongoDBConverters.DateFromLocalDateTime" />
			</mongo:converter>
			<mongo:converter>
				<beans:bean
					class="com.intelliinvest.util.MongoDBConverters.LocalDateTimeFromDate" />
			</mongo:converter>
			<mongo:converter>
				<beans:bean
					class="com.intelliinvest.util.MongoDBConverters.StringFromAnswer" />
			</mongo:converter>
			<mongo:converter>
				<beans:bean
					class="com.intelliinvest.util.MongoDBConverters.AnswerFromString" />
			</mongo:converter>
			<mongo:converter>
				<beans:bean
					class="com.intelliinvest.util.MongoDBConverters.StringFromRiskInvestmentProfileKey" />
			</mongo:converter>
			<mongo:converter>
				<beans:bean
					class="com.intelliinvest.util.MongoDBConverters.RiskInvestmentProfileKeyFromString" />
			</mongo:converter>
		</mongo:custom-converters>
	</mongo:mapping-converter>

	<!-- MongoTemplate -->
	<beans:bean id="mongoTemplate"
		class="org.springframework.data.mongodb.core.MongoTemplate">
		<beans:constructor-arg ref="mongoDbFactory" />
		<beans:constructor-arg name="mongoConverter"
			ref="mappingConverter" />
	</beans:bean>

	<!-- Use this post processor to translate any MongoExceptions thrown in 
		@Repository annotated classes -->
	<beans:bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<beans:bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="intelliinvestStore" class="com.intelliinvest.common.IntelliInvestStore"></beans:bean>
	<beans:bean id="holidayRepository"
		class="com.intelliinvest.data.dao.HolidayRepository"></beans:bean>
	<beans:bean id="dateUtil" class="com.intelliinvest.util.DateUtil"></beans:bean>
	<beans:bean id="mailUtil" class="com.intelliinvest.util.MailUtil"></beans:bean>
	<beans:bean id="stockRepository" class="com.intelliinvest.data.dao.StockRepository"></beans:bean>
	<beans:bean id="quandlEODStockPriceRepository"
		class="com.intelliinvest.data.dao.QuandlEODStockPriceRepository"></beans:bean>
	<beans:bean id="userRepository" class="com.intelliinvest.data.dao.UserRepository"></beans:bean>
	<beans:bean id="scheduledThreadPoolHelper"
		class="com.intelliinvest.util.ScheduledThreadPoolHelper"></beans:bean>
	<beans:bean id="sequenceRepository"
		class="com.intelliinvest.data.dao.SequenceRepository"></beans:bean>
	<beans:bean id="userPortfolioRepository"
		class="com.intelliinvest.data.dao.UserPortfolioRepository"></beans:bean>
	<beans:bean id="forecastedStockPriceRepository"
		class="com.intelliinvest.data.dao.ForecastedStockPriceRepository"></beans:bean>
	<beans:bean id="magicNumberRepository"
		class="com.intelliinvest.data.dao.MagicNumberRepository"></beans:bean>
	<beans:bean id="riskProfileQuestionnaireRepository"
		class="com.intelliinvest.data.dao.RiskProfileQuestionnaireRepository"></beans:bean>
	<beans:bean id="quandlStockPriceImporter"
		class="com.intelliinvest.data.importer.QuandlEODStockPriceImporter"></beans:bean>
	<beans:bean id="googleLiveStockPriceImporter"
		class="com.intelliinvest.data.importer.GoogleLiveStockPriceImporter"></beans:bean>
	<beans:bean id="stockFundamentalsImporter"
		class="com.intelliinvest.data.importer.StockFundamentalsImporter"></beans:bean>
	<beans:bean id="dailyClosePriceForecaster"
		class="com.intelliinvest.data.forecast.DailyClosePriceForecaster"></beans:bean>
	<beans:bean id="closePriceForecastReport"
		class="com.intelliinvest.data.forecast.ClosePriceForecastReport"></beans:bean>
	<beans:bean id="weeklyClosePriceForecaster"
		class="com.intelliinvest.data.forecast.WeeklyClosePriceForecaster"></beans:bean>
	<beans:bean id="monthlyClosePriceForecaster"
		class="com.intelliinvest.data.forecast.MonthlyClosePriceForecaster"></beans:bean>
	<beans:bean id="stockFundamentalsRepository"
		class="com.intelliinvest.data.dao.StockFundamentalsRepository"></beans:bean>
	<beans:bean id="industryFundamentalsRepository"
		class="com.intelliinvest.data.dao.IndustryFundamentalsRepository"></beans:bean>
	<beans:bean id="stockFundamentalAnalysisRepository"
		class="com.intelliinvest.data.dao.StockFundamentalAnalysisRepository"></beans:bean>
	<beans:bean id="stockFundamentalAnalysisForecaster"
		class="com.intelliinvest.data.forecast.StockFundamentalAnalysisForecaster"></beans:bean>
	<beans:bean id="watchListRepository"
		class="com.intelliinvest.data.dao.WatchListRepository"></beans:bean>
	<beans:bean id="stockSignalsRepository"
		class="com.intelliinvest.data.dao.StockSignalsRepository"></beans:bean>
	<beans:bean id="newsFetcherRepository"
		class="com.intelliinvest.data.dao.NewsFetcherRepository"></beans:bean>
	<beans:bean id="stockSignalsGenerator"
		class="com.intelliinvest.data.signals.StockSignalsGenerator"></beans:bean>
	<beans:bean id="magicNumberGenerator"
		class="com.intelliinvest.data.signals.MagicNumberGenerator"></beans:bean>

	<beans:bean id="bubbleDataFetcher"
		class="com.intelliinvest.data.bubbleData.BubbleDataFetcher"></beans:bean>


	<context:component-scan base-package="com.intelliinvest.web.controllers" />
</beans:beans>